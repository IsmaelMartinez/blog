---
layout: post
title:  "Using Simple Notification Service (SNS) in CFML"
date:   2018-05-21 13:18:00 -0400
categories: AWS ColdFusion
---

We're going to move on from [the single AWS service that's natively supported in CFML](/aws/coldfusion/2018/05/21/Using-Simple-Storage-Service-In-CFML.html) to the first service example that uses the AWS Java SDK from within CFML: Simple Notification Service, or SNS.

If you haven't already read the entry on [the basic setup needed to access AWS from CFML](/aws/coldfusion/2018/05/21/Basic-Setup-Needed-To-Access-AWS-From-CFML.html), please do so now.

### What Can Simple Notification Service (SNS) Do for You?

SNS is a simple [publish/subscribe](https://en.wikipedia.org/wiki/Publishâ€“subscribe_pattern) service. Clients subscribe to a SNS topic, and when a message is published to that topic, all subscribers are notififed with a copy of the message. Publishers have no idea who is receiving the message, as clients of different types can subscribe to the topic. You can send emails, text messages, or native push notifications via SNS. 

Some examples of using SNS are:

- Send an email to a subscriber when files are uploaded into a S3 bucket that exceed your file size limits.
- Send a verification code text message to a subscriber to process two-factor authentication on login to your application.
- Publishing notifications to one or more [SQS (Simple Queue Service)](https://aws.amazon.com/sqs/) queues, from which individual messages would be picked up and processed by connected worker clients/applications.
- Pushing a message to a [server endpoint (URL)](https://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html) in a CFML application to trigger or process work based on the content of the message.
- Pushing a message to a subscriber [Lambda](https://aws.amazon.com/lambda/) function for processing on the message's contents.
- Send a message to SNS when one of your [EC2](https://aws.amazon.com/ec2/) instances gets shut down unexpectedly.
- Send a message to SNS when a [CloudWatch alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html) is triggered because you've exceeded more than a specified amount of storage in S3.
- Send a [native iOS/Android notification](https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send.html) to a customer when there is a new notification in your mobile app.

SNS is simple (as you'll see in a moment), flexible, and powerful. It is important to note that it is not a classic message queue. If you want a message queue with acknowledgements, message ordering, retries, or dead letter queues, you need to use [SQS (Simple Queue Service)](https://aws.amazon.com/sqs/).

### Working with SNS from CFML

I'll one again be using [my AWSPlaybox application](https://github.com/brianklaas/awsPlaybox) for all the example code.

As with all AWS services, you need to first create a client for the service that you want to use. This was covered in [the basic setup needed to access AWS from CFML](/aws/coldfusion/2018/05/21/Basic-Setup-Needed-To-Access-AWS-From-CFML.html) post, but here are the basic steps:

1. Create a Client Builder object for the service &mdash; AmazonSNSClientBuilder.
2. Tell the Client Builder what kind of builder object you want to use. It's simplest to use the standard builder.
3. Pass in your credentials via the StaticCredentialsProvider object (created upon instantiation of awsPlaybox/model/awsServiceFactory.cfc).
4. Tell the Client Builder which [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html) you're working in.
5. Tell the Client Builder to build (make) the connection.

Here's the relevant code:

{% highlight javascript %}
serviceObject = CreateObject('java', 'com.amazonaws.services.sns.AmazonSNSClientBuilder').standard().withCredentials(variables.awsStaticCredentialsProvider).withRegion('us-east-1').build();
{% endhighlight %}

Now we can work with SNS from within our CFML application.

### Creating Topics



### Subscribing to Topics

Subscribing to topics is a two-step process.

1. Make the subscription request.
2. Confirm that you (the client) actually wants to subscribe.

The second step is incredibly important because malicious applications could automatically spam SNS or email messages to unwilling (and unhappy) subscribers.

If your SNS topic sends messages via email or SNS, the recipient simply needs to respond to a "Do you want to subscribe to this topic?" message that's automatically generated by SNS when you subscribe to a topic. That part of the process is fully controlled by AWS and isn't something you can customize.  

If you want the example in the AWSPlaybox app to work, you'll need to respond to the email message sent from AWS to subscribe to the topic that you just created.

If you want your CFML application to act as a subscriber to an SNS topic, you need to follow the steps outlined in the [documentation on sending SNS messages to HTTP/S endpoints](https://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html). This requires that your CFML application be able to confirm that it wants to subscribe to a SNS topic via a GET HTTP request and then process individual SNS messages as they come in.

### Sending Messages

Sending a message to SNS is easy. You need to:

1. Give your message a subject
2. Give your message a body (plain text only)
3. Create a PublishRequest object
4. Tell your SNS client to publish your PublishRequest

Here's the relevant code from AWSPlaybox/sns.cfm:

{% highlight javascript %}
subject = "AWS Playbox SNS CFML Demo";
message = "Hello there!" & chr(13) & chr(13) & "The current time is " & DateTimeFormat(Now(), "Full") & ".";

sns = application.awsServiceFactory.createServiceObject('sns');
publishRequest = CreateObject('java', 'com.amazonaws.services.sns.model.PublishRequest').init(application.awsResources.snsTopicARN, message,subject);

sns.publish(publishRequest);
{% endhighlight %}

Remember that we use the AWSPlaybox/model/awsServiceFactory.cfc to make the actual client connection to SNS, passing along our credentials in the process.

If you actually subscribed to the topic that we just created, you should get a copy of the message within seconds. Here's what the messages look like when delivered:

Email

<img src="/assets/postImages/sampleSNSEmail.png" align="center" width="400" height="183" border="1" alt="Sample email message from SNS" />

SMS

<img src="/assets/postImages/sampleSNSText.png" align="center" width="400" height="244" border="1" alt="Sample text message from SNS" />

You can see that in the SMS message, the text message was prefixed by the topic name. The subject value was omitted.

That's it! It's really quite simple to send a message to SNS via the AWS Java SDK from within your CFML application. If you are sending SMS messages, there are lots of [options around price and SMS message type that you can set from within the Java SDK](https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html). You do not need to use these &mdash; they're simply there to help you build a more robust SMS application (if that's what you are doing).

### Caveats About Working with SNS

SNS is a great notification service, but it's not a good transactional or marketing email service. You really should not use SNS for that purpose. You can use [SES (Simple Email Service)](https://aws.amazon.com/ses/) or, better yet, one of many third-party services that do an amazing job of sending transactional and marketing emails. SNS email messages would be a good fit for your DevOps team when something goes wrong with your EC2 instances or if you exceed service limits in AWS. It's a bad idea for sending messages to your CEO. Messages are simple text strings, not HTML, and won't end up looking pretty.

SNS is drop-dead simple for sending SMS (text) messages. However, you can only send 100 SMS messages per month for free to US phone numbers. Everything else (and sending to anywhere outside the US) [incurs a cost](https://aws.amazon.com/sns/sms-pricing/). You can [set spend limits on a SNS topic](https://docs.aws.amazon.com/sns/latest/dg/sms_preferences.html) so that you don't spend more than a set amount in a given month. Even so, sending SMS messages through SNS can add up quickly.

Sending SMS messages through SNS also means that each message needs to conform to standard text messaging limits &mdash; ie; 140 ASCII characters per message. Longer messages are automatically split up into multiple messages for you.

If SNS fails to send a message to a subscriber, it will retry up to three times, waiting 20 seconds between retries by default. That's really handy. However, if you need guaranteed delivery, first-in-first-out queues, or anything slightly more complex than basic retries, you should be using Simple Queue Service (SQS) to send messages that will be processed by remote worker applications.

### Go Do!

It's really easy to send messages through SNS via ColdFusion. This post covered the basics of signing up to a SNS topic and publishing a message to that topic.

If you're interested in performing native mobile push notifications, the always-excellent [AWS Docs cover how to set that up](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html). It's not something that I'm doing at this time.

As mentioned previously, if you want your CFML application to act as a subscriber to an SNS topic, you need to follow the steps outlined in the [documentation on sending SNS messages to HTTP/S endpoints](https://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html). This requires that your CFML application be able to confirm that it wants to subscribe to a SNS topic via a GET HTTP request and then process individual SNS messages as they come in. This is more than I wanted to show in the AWSPlaybox application (especially as SNS needs to be able to communicate with your server, requiring it have a public DNS or using a service like [ngrok](https://ngrok.com)). This topic would make for a good future post, no?